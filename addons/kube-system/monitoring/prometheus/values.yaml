_config:
  _metadata:
    description: prometheus-release-v2.1.0
    name: prometheus
    template:
      type: template.caicloud.io/application
      version: 1.0.0
    version: "v0.2"
  controllers:
  - containers:
    - args:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention=7d
      - --web.enable-lifecycle
      image: '[[ registry_release ]]/prometheus:release-v2.1.0'
      imagePullPolicy: IfNotPresent
      mounts:
      - name: prometheus-config
        path: /etc/prometheus
      - name: prometheus-data
        path: /prometheus
      ports:
      - port: 9090
        protocol: TCP
      resources:
        limits:
          cpu: '4'
          memory: 8Gi
        requests:
          cpu: '2'
          memory: 4Gi
    - env:
      - name: WATCH_DIR
        value: /etc/prometheus
      image: '[[ registry_release ]]/prom-reloader:v0.0.1'
      imagePullPolicy: IfNotPresent
      mounts:
      - name: prometheus-config
        path: /etc/prometheus
    - args:
      - --web.listen-address=:9101
      image: '[[ registry_release ]]/hierarchy-exporter:v0.2'
      imagePullPolicy: IfNotPresent
      ports:
      - port: 9101
        protocol: TCP
    controller:
      replica: 1
    services:
    - name: prometheus
      ports:
      - nodePort: 32100
        port: 9090
        protocol: TCP
        targetPort: 9090
      type: NodePort
    - name: prometheus-0
      ports:
      - port: 9090
        protocol: TCP
        targetPort: 9090
      type: ClusterIP
    type: StatefulSet
    volumes:
    - name: prometheus-config
      source:
        target: prometheus-config
      type: Config
    - name: prometheus-data
      source:
        medium: ''
      type: Scratch
    configs:
    - name: prometheus-config
      data: 
      - key: prometheus.yml
        value: |-
            global:
              scrape_interval: 10s
              evaluation_interval: 10s
            rule_files:
              - /etc/prometheus/*.recording.yml
              - /etc/prometheus/*.alerting.yml

            alerting:
              alertmanagers:
              - static_configs:
                - targets: ["[[ kube_apiserver_endpoint_ip ]]:32101"]

            # A scrape configuration for running Prometheus on a Kubernetes cluster.
            # This uses separate scrape configs for cluster components (i.e. API server, node)
            # and services to allow each to use different authentication configs.
            #
            # Kubernetes labels will be added as Prometheus labels on metrics via the
            # `labelmap` relabeling action.

            # Scrape config for cluster components.
            scrape_configs:
            - job_name: "k8s-exporter"
              static_configs:
                - targets: ['localhost:9100', 'localhost:9101']

            - job_name: "prometheus"
              static_configs:
                - targets: ['localhost:9090']

            - job_name: "app_exporter"
              static_configs:
                - targets: ['app-exporter:8080']

            - job_name: 'etcd-k8s-cluster'

              scheme: http
              kubernetes_sd_configs:
              - role: node

              relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                regex: .*master.+
                action: keep
              - source_labels: [__address__]
                regex: ([^:]+)(?::\d+)?
                replacement: $1:2379
                target_label: __address__

            - job_name: 'etcd-k8s-events'

              scheme: http
              kubernetes_sd_configs:
              - role: node

              relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                regex: .*master.+
                action: keep
              - source_labels: [__address__]
                regex: ([^:]+)(?::\d+)?
                replacement: $1:2381
                target_label: __address__

            - job_name: 'kubernetes-apiservers'

              kubernetes_sd_configs:
              - role: endpoints

              # Default to scraping over https. If required, just disable this or change to
              # `http`.
              scheme: https

              # This TLS & bearer token file config is used to connect to the actual scrape
              # endpoints for cluster components. This is separate to discovery auth
              # configuration because discovery & scraping are two separate concerns in
              # Prometheus. The discovery auth config is automatic if Prometheus runs inside
              # the cluster. Otherwise, more config options have to be provided within the
              # <kubernetes_sd_config>.
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                # If your node certificates are self-signed or use a different CA to the
                # master CA, then disable certificate verification below. Note that
                # certificate verification is an integral part of a secure infrastructure
                # so this should only be disabled in a controlled environment. You can
                # disable certificate verification by uncommenting the line below.
                #
                # insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              # Keep only the default/kubernetes service endpoints for the https port. This
              # will add targets for each API server which Kubernetes adds an endpoint to
              # the default/kubernetes service.
              relabel_configs:
              - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                action: keep
                regex: default;kubernetes;https

            - job_name: 'kube-state-metrics'

              kubernetes_sd_configs:
              - role: endpoints

              relabel_configs:
              - source_labels: [__meta_kubernetes_endpoints_name]
                action: keep
                regex: kube-state-metrics
              - source_labels: [__meta_kubernetes_namespace]
                action: keep
                regex: kube-system

            - job_name: node-exporter

              kubernetes_sd_configs:
              - role: endpoints

              relabel_configs:
              - source_labels: [__meta_kubernetes_endpoints_name]
                regex: node-exporter
                action: keep
              - source_labels: [__meta_kubernetes_namespace]
                regex: kube-system
                action: keep
              - source_labels: [__meta_kubernetes_pod_node_name]
                target_label: cps_node_name

            - job_name: 'kubernetes-cadvisor'

              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              kubernetes_sd_configs:
              - role: node

              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: cps_node_name
                replacement: $1

            - job_name: 'kubernetes-nodes'

              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              kubernetes_sd_configs:
              - role: node

              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - source_labels: [__meta_kubernetes_node_address_LegacyHostIP]
                target_label: host_ip

            - job_name: 'kubernetes-service-endpoints'

              kubernetes_sd_configs:
              - role: endpoints

              relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                action: replace
                target_label: __scheme__
                regex: (https?)
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_host_ip]
                target_label: host_ip
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target_label: service_name

            - job_name: 'kubernetes-services'

              metrics_path: /probe
              params:
                module: [http_2xx]

              kubernetes_sd_configs:
              - role: service

              relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels: [__address__]
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                target_label: service_name

            - job_name: 'kubernetes-pods'

              kubernetes_sd_configs:
              - role: pod

              relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod_name
              - source_labels: [__meta_kubernetes_pod_host_ip]
                target_label: host_ip
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_pod_annotation_helm_sh_namespace,__meta_kubernetes_pod_annotation_helm_sh_release]
                action: replace
                regex: (.+);(.+)
                replacement: $1/$2
                target_label: cps_appkey
